module Main where

import Data.List (sortBy)
import Data.Ord (comparing)

-- HC1T1 - Task 1: Function Composition
double :: Int -> Int
double x = x * 2

increment :: Int -> Int
increment x = x + 1

doubleThenIncrement :: Int -> Int
doubleThenIncrement = increment . double

-- HC1T2 - Task 2: Pure Function Example
circleArea :: Float -> Float
circleArea r = pi * r * r

-- HC1T3 - Task 3: Checking if a Number is Greater than 18
greaterThan18 :: Int -> Bool
greaterThan18 x = x > 18

-- HC1T4 - Task 4: Composing a Function to Process Player Data
type Player = (String, Int)

extractPlayers :: [Player] -> [String]
extractPlayers = map fst

sortByScore :: [Player] -> [Player]
sortByScore = sortBy (flip (comparing snd))

topThree :: [Player] -> [Player]
topThree = take 3

getTopThreePlayers :: [Player] -> [String]
getTopThreePlayers = extractPlayers . topThree . sortByScore

-- HC1T5 - Task 5: Laziness in Haskell
infiniteNumbers :: [Int]
infiniteNumbers = [1..]

takeN :: Int -> [Int]
takeN n = take n infiniteNumbers

-- HC1T6 - Task 6: Using Type Signatures
addNumbers :: Int -> Int -> Int
addNumbers x y = x + y

-- HC1T7 - Task 7: Converting Fahrenheit to Celsius
fToC :: Float -> Float
fToC f = (f - 32) * 5 / 9

-- HC1T8 - Task 8: Higher-Order Functions
applyTwice :: (a -> a) -> a -> a
applyTwice f x = f (f x)

-- Main function to test all tasks
main :: IO ()
main = do
    -- HC1T1
    putStrLn $ "doubleThenIncrement 5: " ++ show (doubleThenIncrement 5)

    -- HC1T2
    putStrLn $ "circleArea 3: " ++ show (circleArea 3)

    -- HC1T3
    putStrLn $ "greaterThan18 20: " ++ show (greaterThan18 20)
    putStrLn $ "greaterThan18 10: " ++ show (greaterThan18 10)

    -- HC1T4
    let players = [("Alice", 50), ("Bob", 70), ("Carol", 65), ("Dave", 80)]
    putStrLn $ "Top 3 Players: " ++ show (getTopThreePlayers players)

    -- HC1T5
    putStrLn $ "First 10 infinite numbers: " ++ show (takeN 10)

    -- HC1T6
    putStrLn $ "addNumbers 7 8: " ++ show (addNumbers 7 8)

    -- HC1T7
    putStrLn $ "fToC 98.6: " ++ show (fToC 98.6)

    -- HC1T8
    putStrLn $ "applyTwice (+2) 5: " ++ show (applyTwice (+2) 5)
